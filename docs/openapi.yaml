openapi: 3.1.0
info:
  title: Bank Cards API
  version: "1.0"
  description: API для управления картами, пользователями, переводами и аутентификацией

servers:
  - url: http://localhost:8080/api
    description: Локальный сервер разработки

tags:
  - name: Auth
    description: Аутентификация и регистрация
  - name: AdminUsers
    description: Управление пользователями (админ)
  - name: AdminCards
    description: Управление картами (админ)
  - name: UserCards
    description: Просмотр карт и балансов пользователя
  - name: Transfers
    description: Переводы между картами

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Пользователи
    UserDto:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        active:
          type: boolean
      required:
        - username
        - email
        - role
        - active

    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
        active:
          type: boolean
      required:
        - username
        - email
        - password
        - role

    # Карты
    CardDto:
      type: object
      properties:
        maskedCardNumber:
          type: string
        cardHolder:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
        balance:
          type: number
          format: double
        isBlocked:
          type: boolean
      required:
        - maskedCardNumber
        - cardHolder
        - expirationDate
        - status
        - balance
        - isBlocked

    CreateCardRequest:
      type: object
      properties:
        cardHolder:
          type: string
        expirationDate:
          type: string
          format: date
        initialBalance:
          type: number
          format: double
          default: 0
        userId:
          type: integer
      required:
        - cardHolder
        - expirationDate
        - userId

    CardBalanceResponse:
      type: object
      properties:
        balance:
          type: number
          format: double
        maskedCardNumber:
          type: string
        status:
          type: string
        currency:
          type: string
          default: BYN
      required:
        - balance
        - maskedCardNumber
        - status
        - currency

    # Аутентификация
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
        role:
          type: string
      required:
        - token
        - username
        - role

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - username
        - email
        - password

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    # Переводы
    TransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
        toCardId:
          type: integer
        amount:
          type: number
          format: double
        description:
          type: string
      required:
        - fromCardId
        - toCardId
        - amount

    TransferResult:
      type: object
      properties:
        status:
          type: string
        fromCardId:
          type: integer
        toCardId:
          type: integer
        amount:
          type: number
          format: double
        description:
          type: string
      required:
        - status
        - fromCardId
        - toCardId
        - amount

security:
  - bearerAuth: []

paths:
  # ------------------------ Auth ------------------------
  /auth/login:
    post:
      tags: [Auth]
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /auth/register:
    post:
      tags: [Auth]
      summary: Регистрация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  # ------------------------ Admin Users ------------------------
  /admin/users:
    get:
      tags: [AdminUsers]
      summary: Получить список всех пользователей
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      tags: [AdminUsers]
      summary: Создать нового пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Созданный пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /admin/users/{id}:
    get:
      tags: [AdminUsers]
      summary: Получить пользователя по ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags: [AdminUsers]
      summary: Обновить пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Обновленный пользователь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    delete:
      tags: [AdminUsers]
      summary: Удалить пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Успешно удалено

  # ------------------------ Admin Cards ------------------------
  /admin/cards:
    get:
      tags: [AdminCards]
      summary: Получить список всех карт (с пагинацией)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Страница карт
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDto'
    post:
      tags: [AdminCards]
      summary: Создать карту для пользователя
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Созданная карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  /admin/cards/{id}:
    get:
      tags: [AdminCards]
      summary: Получить карту по ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
    delete:
      tags: [AdminCards]
      summary: Удалить карту
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Успешно удалено

  /admin/cards/{id}/block:
    put:
      tags: [AdminCards]
      summary: Заблокировать карту
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Заблокированная карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  /admin/cards/{id}/activate:
    put:
      tags: [AdminCards]
      summary: Активировать карту
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Активированная карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'

  # ------------------------ User Cards ------------------------
  /users/my:
    get:
      tags: [UserCards]
      summary: Получить все карты пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Список карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDto'

  /users/paginated:
    get:
      tags: [UserCards]
      summary: Получить карты пользователя с пагинацией
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
        - name: search
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: size
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Страница карт
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDto'

  /users/{id}/balance:
    get:
      tags: [UserCards]
      summary: Получить баланс карты
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Баланс карты
          content:
            application/json:
              schema:
                type: number
                format: double

  /users/{userId}/balances:
    get:
      tags: [UserCards]
      summary: Получить баланс всех карт пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Балансы карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardBalanceResponse'

  # ------------------------ Transfers ------------------------
  /transfers/own:
    post:
      tags: [Transfers]
      summary: Перевод между своими картами
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Результат перевода
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResult'

  /transfers/external:
    post:
      tags: [Transfers]
      summary: Перевод на внешнюю карту
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '200':
          description: Результат перевода
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResult'